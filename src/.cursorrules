# Instructions

During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again. 

You should also use the `.cursorrules` file as a Scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the Scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the Scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# Tools

Note all the tools are in python3. So in the case you need to do batch processing, you can always consult the python files and write your own script.

## Screenshot Verification

The screenshot verification workflow allows you to capture screenshots of web pages and verify their appearance using LLMs. The following tools are available:

1. Screenshot Capture:
```bash
venv/bin/python3 tools/screenshot_utils.py URL [--output OUTPUT] [--width WIDTH] [--height HEIGHT]
```

2. LLM Verification with Images:
```bash
venv/bin/python3 tools/llm_api.py --prompt "Your verification question" --provider {openai|anthropic} --image path/to/screenshot.png
```

Example workflow:
```python
from screenshot_utils import take_screenshot_sync
from llm_api import query_llm

# Take a screenshot
screenshot_path = take_screenshot_sync('https://example.com', 'screenshot.png')

# Verify with LLM
response = query_llm(
    "What is the background color and title of this webpage?",
    provider="openai",  # or "anthropic"
    image_path=screenshot_path
)
print(response)
```

## LLM

You always have an LLM at your side to help you with the task. For simple tasks, you could invoke the LLM by running the following command:
```
venv/bin/python3 ./tools/llm_api.py --prompt "What is the capital of France?" --provider "anthropic"
```

The LLM API supports multiple providers:
- OpenAI (default, model: gpt-4o)
- Azure OpenAI (model: configured via AZURE_OPENAI_MODEL_DEPLOYMENT in .env file, defaults to gpt-4o-ms)
- DeepSeek (model: deepseek-chat)
- Anthropic (model: claude-3-sonnet-20240229)
- Gemini (model: gemini-pro)
- Local LLM (model: Qwen/Qwen2.5-32B-Instruct-AWQ)

But usually it's a better idea to check the content of the file and use the APIs in the `tools/llm_api.py` file to invoke the LLM if needed.

## Web browser

You could use the `tools/web_scraper.py` file to scrape the web.
```bash
venv/bin/python3 ./tools/web_scraper.py --max-concurrent 3 URL1 URL2 URL3
```
This will output the content of the web pages.

## Search engine

You could use the `tools/search_engine.py` file to search the web.
```bash
venv/bin/python3 ./tools/search_engine.py "your search keywords"
```
This will output the search results in the following format:
```
URL: https://example.com
Title: This is the title of the search result
Snippet: This is a snippet of the search result
```
If needed, you can further use the `web_scraper.py` file to scrape the web page content.

# Lessons

## User Specified Lessons

- You have a python venv in ./venv. Always use (activate) it when doing python development. First, to check whether 'uv' is available, use `which uv`. If that's the case, first activate the venv, and then use `uv pip install` to install packages. Otherwise, fall back to `pip`.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.
- Don't make users wait for ML models to load before they can interact with the application. Instead, start loading models in the background and allow users to interact with the UI immediately. Only check for model availability when the user actually needs to use it (like when they click "Analyze").
- Maintain consistent UI elements across pages (like headers, footers, and navigation) to provide a cohesive user experience. Core elements like the navbar and footer should have the same structure and style throughout the application to ensure users always know they're on the same website.
- Implement robust error handling for ML model loading, including retry mechanisms. Use longer timeouts for model loading (30 seconds rather than 10-15), add proper state management to track loading attempts, and provide clear error messages and retry options when model loading fails.
- Component extraction is a powerful refactoring technique that dramatically reduces code duplication and improves maintainability.
- For browser-based ML applications, always provide detailed, user-friendly error messages with clear next steps when something goes wrong.
- Use React hooks strategically to create more dynamic and responsive components (like useLocation for conditional rendering).
- When handling image uploads, especially from mobile devices, implement client-side image compression for large files. This reduces processing time, prevents memory issues, and improves user experience. Only compress images that exceed size thresholds (like 2MB) and maintain original quality for those that don't.
- For Single Page Applications (SPAs) deployed on Vercel, ensure URL consistency by adding the "trailingSlash: true" option in vercel.json to prevent Google Search Console "Page with redirect" issues. Also ensure your canonical URLs in SEO components and sitemap consistently use trailing slashes to avoid redirect chains.

## Cursor learned

- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
- Use 'gpt-4o' as the model name for OpenAI's GPT-4 with vision capabilities
- When searching for recent news, use the current year (2025) instead of previous years, or simply use the "recent" keyword to get the latest information
- When extracting reusable components, always consider adding configurable props for flexibility (e.g., simplified mode, visibility toggles)
- For ML models in browser applications:
  - Use longer timeouts (30+ seconds) for model loading operations
  - Implement proper loading state tracking to prevent duplicate load attempts
  - Add retry mechanisms with clear user feedback
  - Provide multiple fallback options for different API versions
  - Include crossOrigin handling for image loading to prevent CORS issues
- Regular codebase cleanup significantly improves maintainability and reduces technical debt
- After component refactoring, always check for and clean up unused imports and state variables
- For client-side image processing:
  - Use HTML5 Canvas for efficient image resizing and compression
  - Maintain aspect ratio when resizing images to prevent distortion
  - Convert large PNGs to JPEGs for better compression ratios
  - Only compress images that exceed size thresholds to maintain quality when possible
  - Show loading indicators during compression to improve user experience
- For SPAs with client-side routing:
  - Ensure URL consistency by using either all trailing slashes or no trailing slashes
  - Configure proper rewrites in deployment platforms like Vercel to ensure smooth SPA navigation
  - Keep sitemap.xml URLs consistent with the URL format used in canonical tags
  - Address Google Search Console "Page with redirect" warnings promptly to prevent SEO issues
  - Use the trailingSlash configuration in deployment platforms when available

# Scratchpad

## Completed Task: Google Search Console Redirection Fix
[X] Analyze redirection issues reported in Google Search Console
[X] Research common causes of "Page with redirect" issues for SPAs
[X] Add "trailingSlash: true" configuration to vercel.json to ensure URL consistency
[X] Update SEO component to ensure all canonical URLs have trailing slashes
[X] Fix sitemap URLs to include trailing slashes matching canonical URLs
[X] Update lessons section with findings about SPA redirection best practices
[X] Document solution for future reference to prevent recurrence

## Completed Task: Mobile Image Optimization
[X] Analyze current image processing workflow and identify issues with large mobile uploads
[X] Implement client-side image compression feature in ImageUploader component
[X] Add detection of image dimensions and file size to determine if compression is needed
[X] Create compression function using HTML5 Canvas for efficient resizing
[X] Add processing state indicators and feedback for users
[X] Update error handling for WebGL texture size errors
[X] Maintain original quality for already optimized images
[X] Add user feedback with toast notifications for compression process
[X] Preserve original image filename during compression
[X] Update Lessons section with learnings about image optimization

## Current Task: Homepage Redesign
[X] Analyze current homepage structure and content
[X] Plan new layout with modern design elements
[X] Implement hero section with gradient background
[X] Add features section with cards
[X] Improve upload section with better visual hierarchy
[X] Add "How It Works" section
[X] Enhance footer with better layout
[X] Update .cursorrules with lessons learned

## Next Steps
[ ] Consider adding animations for better user experience
[ ] Test responsive design on different screen sizes
[ ] Consider adding testimonials section
[ ] Add loading state animations
[ ] Consider adding dark mode support